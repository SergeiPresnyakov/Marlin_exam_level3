Сначала определим какую задачу должен выполнять этот компонент. Этот компонент должен строить и выполнять SQL-запросы в базе данных.
Подключением к базе будет заниматься другой компонент и QueryBuilder будет принимать в конструкторе подключение к базе (объект PDO).
Компонент QueryBuilder будет выполнять 6 видов запросов:

1. Получить все данные из таблицы. - getAll
2. Получить одну запись из таблицы по id. - getById
3. Получить запись по условию. - get
4. Вставить запись в таблицу. - insert
5. Обновить запись в таблице. - update
6. Удалить запись из таблицы. - delete

Компонент будет требовать создания экземпляра.

Методы getAll - реализуeтся довольно просто.

Для методов get и getById я использую прием с массивом where из 3-х элементов, мы использовали его на уровне 2. 
Например ['name', '=', 'John']

Заметил что мы во многих методах дублируем код, который подготавливает SQL запрос, привязывает значения в запросе и выполняет его. 
Вынес эту часть кода в метод query.
Также создал метод action, который может составлять SQL-запросы, используя аргумент action, представляющий собой начальную часть запроса
"SELECT *", "DELETE", "INSERT INTO" и т.д., а также аргумент where. Методы action и qeury будут с модификатором доступа private,
поскольку не предназначены для самостоятельного использования, они являются вспомогательными для других методов.

Для составления SQL-запроса в методе insert используем стандартные функции php для работы со строками и конкатенацию. 
Этот метод будет возвращать успешность выполнения запроса (bool).

Метод delete так же как и методы getById и get, будет оберткой над методом action. Будет возвращать успешность запроса (bool)